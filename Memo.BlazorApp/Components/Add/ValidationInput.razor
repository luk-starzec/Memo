@inherits InputText

<div class="@CssClass validation-input__wrapper">

    <input value="@CurrentValue"
           type="@InputType"
           placeholder="@placeholder"
           @oninput="EventCallback.Factory.CreateBinder<string>(this, __value => CurrentValueAsString = __value, CurrentValueAsString)"
           @onkeyup="Validate" />

    @if (showValidationMarker)
    {
        <img src="@srcValidationMarker" />
    }

</div>

@code{
    [Parameter]
    public string InputType { get; set; } = "text";
    [Parameter]
    public string placeholder { get; set; }
    [Parameter]
    public Func<bool?> ValidationFunction { get; set; }
    [Parameter]
    public EventCallback<string> OnTextChanged { get; set; }

    bool showValidationMarker = false;
    bool isValid = true;
    string srcValidationMarker => isValid ? "/assets/check-icon.svg" : "/assets/x-icon.svg";

    async Task Validate(KeyboardEventArgs eventArgs)
    {
        await OnTextChanged.InvokeAsync(CurrentValueAsString);

        if (string.IsNullOrEmpty(CurrentValueAsString))
        {
            showValidationMarker = false;
            return;
        }

        isValid = ValidationFunction?.Invoke() ?? true;
        showValidationMarker = true;
    }
}

<EditForm Model="@memo" OnValidSubmit="AddMemo" @attributes="InputAttributes">

    <DataAnnotationsValidator />

    <div class="memo-add__row">
        <LogoSmall class="memo-add__logo" />

        <input type="text" class="memo-add__url" placeholder="generated url" readonly
               value="@memo.Url" />
    </div>

    <ValidationInput class="memo-add__title memo-add__row" placeholder="title"
                     @bind-Value="@memo.Title"
                     ValidationFunction="() => ValidateField(nameof(memo.Title))" OnTextChanged="GenerateUrl" />
    <ValidationMessage For="() => memo.Title" />

    <InputTextArea class="memo-add__text memo-add__row" @bind-Value="memo.Text" placeholder="message" />
    <ValidationMessage For="() => memo.Text" />

    <div class="memo-add__form-grid">

        <label class="memo-add__grid-row memo-add__grid-label memo-add__grid-label--expires">
            <InputCheckbox @bind-Value="memo.EnabledExpires" />
            Expires:
        </label>
        <InputDate class="memo-add__grid-row memo-add__grid-value memo-add__grid-value--expires" @bind-Value="memo.Expires" disabled="@(!memo.EnabledExpires)" />
        <ValidationMessage For="() => memo.Expires" />

        <label class="memo-add__grid-row memo-add__grid-label" for="pin">
            Pin:
        </label>
        <ValidationInput class="memo-add__grid-row memo-add__grid-value memo-add__grid-value--pin" id="pin"
                         @bind-Value="memo.Pin"
                         IsPin="true" ValidationFunction="() => ValidateField(nameof(memo.Pin))" />
        <ValidationMessage For="() => memo.Pin" />

        <label class="memo-add__grid-row--tight memo-add__grid-label" for="confirm">
            Confirm:
        </label>
        <ValidationInput class="memo-add__grid-row--tight memo-add__grid-value memo-add__grid-value--pin" id="confirm"
                         @bind-Value="memo.ConfirmPin"
                         IsPin="true" ValidationFunction="() => ValidateField(nameof(memo.ConfirmPin))" />
        <ValidationMessage For="() => memo.ConfirmPin" />

        <ErrorMessages Errors="@Errors" />

        <button type="submit" class="memo-add__add-button memo-add__row">
            <img src="/assets/add-icon.svg" />
            <span>Add memo</span>
        </button>

    </div>

</EditForm>

@code {
    [Parameter]
    public EventCallback<MemoNewModel> OnAdd { get; set; }

    [Parameter]
    public string[] Errors { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; }

    MemoNewModel memo = new MemoNewModel();

    bool ValidateField(string field)
    {
        var errors = memo.Validate();
        return !errors.Where(r => r.MemberNames.Contains(field)).Any();
    }

    void GenerateUrl()
    {
        memo.Url = Helpers.GetUrl(memo.Title);
        StateHasChanged();
    }

    async Task AddMemo(EditContext editContext) => await OnAdd.InvokeAsync(memo);
}

@inject IJSRuntime js

<div class="auth-panel__wrapper">

    <Padlock Error="@padlockError" Opened="@padlockOpened" />

    <div class="@cssMessage">@message</div>

    <input type="password" pattern="[0-9]*" inputmode="numeric" class="auth-panel__pin"
           @bind="@pin" @onkeyup="OnKeyDown" placeholder="PIN" readonly="@isMobile" @ref="inputRef" />

    <div class="auth-panel__buttons-wrapper">

        @for (int i = 1; i < 10; i++)
        {
            int index = i;
            <button class="auth-panel__button" @onclick="()=>OnClickNumber(index)">@i</button>
        }

        <button class="auth-panel__button auth-panel__button--clear" @onclick="OnClickClear">
            <img src="/assets/x-icon.svg" />
        </button>

        <button class="auth-panel__button" @onclick="()=>OnClickNumber(0)">0</button>

        <button class="auth-panel__button auth-panel__button--ok" @onclick="OnClickOk">
            <img src="/assets/check-icon.svg" />
        </button>

    </div>

</div>

@code {
    [Parameter]
    public EnumAuthorizationState AuthorizationState { get; set; }
    [Parameter]
    public EventCallback<string> OnLogIn { get; set; }

    public string pin;

    string message => AuthorizationState switch
    {
        EnumAuthorizationState.Checking => "Checking...",
        EnumAuthorizationState.Denied => "Access denied",
        EnumAuthorizationState.Granted => "Access granted",
        _ => "Authorization required"
    };
    string cssMessage
        => $"auth-panel__message {(AuthorizationState == EnumAuthorizationState.Denied ? "auth-panel__message--error" : "")} {(AuthorizationState == EnumAuthorizationState.Granted ? "auth-panel__message--ok" : "")}";

    bool padlockError => AuthorizationState == EnumAuthorizationState.Denied;
    bool padlockOpened => AuthorizationState == EnumAuthorizationState.Granted;

    ElementReference inputRef;

    bool isMobile;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var userAgent = await js.InvokeAsync<string>("getUserAgent");
            isMobile = Helpers.IsMobile(userAgent);
            if (isMobile)
                StateHasChanged();

            await FocusInput();
        }
    }


    async Task FocusInput()
    {
        await inputRef.FocusAsync();
    }

    async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
            await OnClickOk();
    }

    async Task OnClickNumber(int number)
    {
        pin += number.ToString();
        await FocusInput();
    }

    async Task OnClickClear()
    {
        pin = string.Empty;
        await FocusInput();
    }

    async Task OnClickOk() => await OnLogIn.InvokeAsync(pin);

}

@page "/add"

@inject IMemosRepo memosRepo
@inject ITokenManager tokenManager;
@inject NavigationManager navigationManager


<div class="add-page__wrapper">

    <div class="add-page__logo"></div>

    <EditForm class="add-page__form" Model="@memo" OnValidSubmit="AddMemo">
        <DataAnnotationsValidator />

        <input type="text" class="add-page__url" value="@memo.Url" placeholder="generated url" readonly />

        <InputOnInput class="add-page__title" @bind-Value="@memo.Title" ValidationFunction="()=>ValidateField(nameof(memo.Title))" />
        <ValidationMessage For="() => memo.Title" />

        <InputTextArea class="add-page__text" @bind-Value="memo.Text" placeholder="message" />
        <ValidationMessage For="() => memo.Text" />

        <InputCheckbox class="add-page__valid-to-checkbox" @bind-Value="memo.EnabledValidTo">Valid to</InputCheckbox>
        <InputDate class="add-page__valid-to-date" @bind-Value="memo.ValidTo" />

        <InputOnInput class="add-page__pin" @bind-Value="memo.Pin" InputType="password" ValidationFunction="()=>ValidateField(nameof(memo.Pin))" />
        <ValidationMessage For="() => memo.Pin" />

        <InputOnInput class="add-page__pin" @bind-Value="memo.ConfirmPin" InputType="password" ValidationFunction="()=>ValidateField(nameof(memo.ConfirmPin))" />
        <ValidationMessage For="() => memo.ConfirmPin" />

        <button type="submit" class="add-page__add-button">
            <img src="/assets/add-icon.svg" />
            <span>Add memo</span>
        </button>

    </EditForm>

    <img class="add-page__background-image" src="/assets/add-image.svg" />

</div>

@code {
    MemoNewModel memo = new MemoNewModel();

    bool ValidateField(string field)
    {
        if (field == nameof(memo.Title))
            GenerateUrl();

        var errors = memo.Validate();
        return !errors.Where(r => r.MemberNames.Contains(field)).Any();
    }

    void GenerateUrl()
    {
        memo.Url = Helpers.GetUrl(memo.Title);
        StateHasChanged();
    }

    async Task AddMemo(EditContext editContext)
    {
        if (await memosRepo.CreateMemo(memo))
        {
            var token = tokenManager.CreateToken(memo.Pin);
            navigationManager.NavigateTo($"/view/{memo.Url}/{token}");
        }
        // TODO error handling
    }

}

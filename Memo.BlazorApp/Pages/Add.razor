@page "/add"

@inject IMemosRepo memosRepo
@inject ITokenManager tokenManager;
@inject NavigationManager navigationManager


<div class="add-page__wrapper">

    <Logo class="add-page__logo" />

    <EditForm class="add-page__form" Model="@memo" OnValidSubmit="AddMemo">
        <DataAnnotationsValidator />

        <input type="text" class="add-page__url add-page__form-row" value="@memo.Url" placeholder="generated url" readonly />

        <ValidationInput class="add-page__title add-page__form-row" placeholder="title"
                      @bind-Value="@memo.Title" ValidationFunction="()=>ValidateField(nameof(memo.Title))" OnTextChanged="GenerateUrl" />
        <div class="add-page__form-row--validation">
            <ValidationMessage For="() => memo.Title" />
        </div>

        <InputTextArea class="add-page__text add-page__form-row" @bind-Value="memo.Text" placeholder="message" />
        <div class="add-page__form-row--validation">
            <ValidationMessage For="() => memo.Text" />
        </div>

        <div class="add-page__form-grid">
            <label class="add-page__label add-page__label--expires add-page__form-row">
                <InputCheckbox class="add-page__expires-checkbox" @bind-Value="memo.EnabledExpires" />
                Expires:
            </label>
            <InputDate class="add-page__expires-date add-page__form-row" @bind-Value="memo.Expires" />

            <label class="add-page__label add-page__label--pin add-page__form-row" for="pin">
                Pin:
            </label>
            <ValidationInput class="add-page__pin add-page__form-row" id="pin"
                          @bind-Value="memo.Pin" InputType="password" ValidationFunction="()=>ValidateField(nameof(memo.Pin))" />
            <div class="add-page__pin-error add-page__form-row--validation">
                <ValidationMessage For="() => memo.Pin" />
            </div>

            <label class="add-page__label add-page__label--confirm add-page__form-row--tight" for="confirm">
                Confirm:
            </label>
            <ValidationInput class="add-page__pin add-page__pin--confirm add-page__form-row--tight" id="confirm"
                          @bind-Value="memo.ConfirmPin" InputType="password" ValidationFunction="()=>ValidateField(nameof(memo.ConfirmPin))" />
            <div class="add-page__confirm-error add-page__form-row--validation">
                <ValidationMessage For="() => memo.ConfirmPin" />
            </div>

            <button type="submit" class="add-page__add-button add-page__form-row">
                <img src="/assets/add-icon.svg" />
                <span>Add memo</span>
            </button>

        </div>

    </EditForm>

    <img class="add-page__background-image" src="/assets/add-image.svg" />

</div>

@code {
    MemoNewModel memo = new MemoNewModel();

    bool ValidateField(string field)
    {
        var errors = memo.Validate();
        return !errors.Where(r => r.MemberNames.Contains(field)).Any();
    }

    void GenerateUrl()
    {
        memo.Url = Helpers.GetUrl(memo.Title);
        StateHasChanged();
    }

    async Task AddMemo(EditContext editContext)
    {
        if (await memosRepo.CreateMemo(memo))
        {
            var token = tokenManager.CreateToken(memo.Pin);
            navigationManager.NavigateTo($"/view/{memo.Url}/{token}");
        }
        // TODO error handling
    }

}

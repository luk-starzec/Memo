@page "/view/{url}"
@page "/view/{url}/{token:guid?}"

@inject NavigationManager navigationManager
@inject IMemosRepo memosRepo
@inject ITokenManager tokenManager;

<div class="preview-page__wrapper">

    <PageTitle Title="@pageTitle" />

    <Logo class="@cssLogo" />

    @if (memoReadModel is null)
    {
        <img class="preview-page__loader" src="/assets/loader.svg" alt="loading..." />
    }
    else
    {

        @if (isLoggedIn)
        {
            <MoreMenu @bind-IsExpanded="isMenuExpanded"
                      OnEdit="EditMemo" OnRemove="RemoveMemo" OnCancelEdit="CancelEdit" IsEditMode="@isEditMode" />

            <h3 class="preview-page__title">
                @memoReadModel.Title
            </h3>

            @if (isEditMode)
            {
                <MemoEdit Memo="@memoEditModel" OnSave="UpdateMemo" />
            }
            else
            {
                <MemoView Memo="@memoReadModel" />
            }

            <img class="preview-page__background-image" src="/assets/preview-image.svg" />
        }
        else
        {
            <AuthPanel AuthorizationState="@authorizationState" OnLogIn="LogIn" />

            <a class="preview-page__index-link" href="/">back to start page</a>

            <img class="preview-page__background-image" src="/assets/login-image.svg" />
        }

    }

</div>

<div class="@cssMask" @onclick="() => isMenuExpanded=false"></div>

@code {
    [Parameter]
    public string Url { get; set; }
    [Parameter]
    public Guid? Token { get; set; }

    MemoReadModel memoReadModel;
    MemoEditModel memoEditModel;

    string pageTitle => memoReadModel is null ?"Memo": $"Memo - {memoReadModel.Title}";

    string pin;

    EnumAuthorizationState authorizationState;

    bool isLoggedIn = false;
    bool isMenuExpanded = false;
    bool isEditMode => memoEditModel is not null;

    string cssMask => $"preview-page__mask {(isMenuExpanded ? "preview-page__mask--visible" : "")}";
    string cssLogo => isLoggedIn ? "preview-page__logo" : "preview-page__logo preview-page__logo--auth";


    protected override async Task OnInitializedAsync()
    {
        var memo = await memosRepo.GetMemoReadModelAsync(Url);
        if (memo is not null)
            memoReadModel = memo;
        else
            navigationManager.NavigateTo("/404");

        if (Token is not null)
            await TokenLogIn(Token.Value);
    }

    async Task LogIn(string pin)
    {
        await Authorize(pin);

        if (authorizationState == EnumAuthorizationState.Granted)
            AccessGranted();
    }

    async Task TokenLogIn(Guid token)
    {
        var pin = tokenManager.GetValue(Token.Value);

        if (pin is null)
            return;

        await Authorize(pin);

        if (authorizationState == EnumAuthorizationState.Granted)
            ShowMemo();
    }

    async Task Authorize(string pin)
    {
        authorizationState = EnumAuthorizationState.Checking;
        await Task.Delay(100);

        memoReadModel.Text = AesHelper.Decrypt(memoReadModel.EncryptedData, memoReadModel.IV, pin);
        authorizationState = memoReadModel.Text is null ? EnumAuthorizationState.Denied : EnumAuthorizationState.Granted;
        this.pin = pin;
    }

    void AccessGranted()
    {
        var timer = new System.Timers.Timer
        {
            Interval = 500,
            AutoReset = false,
        };
        timer.Elapsed += (s, e) => InvokeAsync(ShowMemo);
        timer.Enabled = true;
    }

    void ShowMemo()
    {
        isLoggedIn = true;
        StateHasChanged();
    }

    async Task EditMemo()
    {
        var memo = await memosRepo.GetMemoEditModelAsync(Url, pin);
        if (memo is not null)
            memoEditModel = memo;
        isMenuExpanded = false;
    }

    void CancelEdit()
    {
        memoEditModel = null;
        isMenuExpanded = false;
    }

    async Task RemoveMemo()
    {
        isMenuExpanded = false;
        if (await memosRepo.DeleteMemoAsync(Url))
        {
            navigationManager.NavigateTo("/");
        }
        // TODO error handling
    }

    async Task UpdateMemo(MemoEditModel memo)
    {
        var updatedMemo = await memosRepo.UpdateMemoAsync(memo, pin);
        if (updatedMemo is not null)
        {
            memoReadModel = updatedMemo;
            memoReadModel.Text = AesHelper.Decrypt(memoReadModel.EncryptedData, memoReadModel.IV, pin);

            memoEditModel = null;
        }
        // TODO error handling
    }
}

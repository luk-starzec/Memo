@page "/view/{url}"
@page "/view/{url}/{token:guid?}"

@inject NavigationManager navigationManager
@inject IMemosRepo memosRepo
@inject ITokenManager tokenManager;

<div class="preview-page__wrapper">

    @if (memoModel is null)
    {
        <img class="preview-page__loader" src="/assets/loader.svg" alt="loading..." />
    }
    else
    {

        @if (isLoggedIn)
        {
            <MoreMenu @bind-IsExpanded="isMenuExpanded" OnEdit="EditMemo" OnRemove="RemoveMemo" OnCancelEdit="CancelEdit" IsEditMode="@isEditMode" />

            @if (isEditMode)
            {
                <MemoEdit Memo="@memoEditModel" OnSave="UpdateMemo" />
            }
            else
            {
                <MemoPreview Memo="@memoModel" />
            }

            <img class="preview-page__background-image" src="/assets/preview-image.svg" />
        }
        else
        {
            <LogIn AuthorizationState="@authorizationState" OnLogIn="LogIn" />

            <img class="preview-page__background-image" src="/assets/login-image.svg" />
        }

    }

</div>

<div class="@cssMask" @onclick="() => isMenuExpanded=false">XXX</div>

@code {
    [Parameter]
    public string Url { get; set; }
    [Parameter]
    public Guid? Token { get; set; }

    MemoReadModel memoModel;
    MemoEditModel memoEditModel;

    string pin;

    EnumAuthorizationState authorizationState;

    bool isLoggedIn = false;
    bool isMenuExpanded = false;
    bool isEditMode => memoEditModel is not null;

    string cssMask => $"preview-page__mask {(isMenuExpanded ? "preview-page__mask--visible" : "")}";

    protected override async Task OnInitializedAsync()
    {
        var memo = await memosRepo.GetMemoReadModel(Url);
        if (memo is not null)
            memoModel = memo;
        else
            navigationManager.NavigateTo("/404");

        if (Token is not null)
            TokenLogIn(Token.Value);
    }

    void LogIn(string pin)
    {
        Authorize(pin);

        if (authorizationState == EnumAuthorizationState.Granted)
            AccessGranted();
    }

    void TokenLogIn(Guid token)
    {
        var pin = tokenManager.GetValue(Token.Value);

        if (pin is null)
            return;

        Authorize(pin);

        if (authorizationState == EnumAuthorizationState.Granted)
            ShowMemo();
    }

    void Authorize(string pin)
    {
        memoModel.Text = AesHelper.Decrypt(memoModel.EncryptedData, memoModel.IV, pin);
        authorizationState = memoModel.Text is null ? EnumAuthorizationState.Denied : EnumAuthorizationState.Granted;
        this.pin = pin;
    }

    void AccessGranted()
    {
        var timer = new System.Timers.Timer();
        timer.Interval = 1000;
        timer.Elapsed += (s, e) => InvokeAsync(ShowMemo);
        timer.AutoReset = false;
        timer.Enabled = true;
    }

    void ShowMemo()
    {
        isLoggedIn = true;
        StateHasChanged();
    }

    void CancelEdit()
    {
        memoEditModel = null;
        isMenuExpanded = false;
    }

    async Task EditMemo()
    {
        var memo = await memosRepo.GetMemoEditModel(Url, pin);
        if (memo is not null)
            memoEditModel = memo;
        isMenuExpanded = false;
    }

    async Task RemoveMemo()
    {
        isMenuExpanded = false;
        if (await memosRepo.DeleteMemo(Url))
        {
            navigationManager.NavigateTo("/");
        }
        // TODO error handling
    }

    async Task UpdateMemo(MemoEditModel memo)
    {
        var updatedMemo = await memosRepo.UpdateMemo(memo, pin);
        if (updatedMemo is not null)
        {
            memoModel = updatedMemo;
            memoModel.Text = AesHelper.Decrypt(memoModel.EncryptedData, memoModel.IV, pin);

            memoEditModel = null;
        }
        // TODO error handling
    }
}

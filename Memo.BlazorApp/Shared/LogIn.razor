
<div class="log-in__wrapper">

    <Padlock Error="@padlockError" Opened="@padlockOpened" />

    <div class="@cssMessage">@message</div>

    <input type="password" class="log-in__pin" @bind="@pin" placeholder="PIN" />

    <div class="log-in__buttons-wrapper">

        @for (int i = 1; i < 10; i++)
        {
            int index = i;
            <button class="log-in__button" @onclick="()=>OnClickNumber(index)">@i</button>
        }

        <button class="log-in__button log-in__button--ok" @onclick="OnClickOk">
            <img src="/assets/check-icon.svg" />
        </button>

        <button class="log-in__button" @onclick="()=>OnClickNumber(0)">0</button>

        <button class="log-in__button log-in__button--clear" @onclick="OnClickClear">
            <img src="/assets/x-icon.svg" />
        </button>

    </div>

</div>

@code {
    [Parameter]
    public EnumAuthorizationState AuthorizationState { get; set; }
    [Parameter]
    public EventCallback<string> OnLogIn { get; set; }

    public string pin;

    string message => AuthorizationState switch
    {
        EnumAuthorizationState.Denied => "Access denied",
        EnumAuthorizationState.Granted => "Access granted",
        _ => "Authorization required"
    };
    string cssMessage
        => $"log-in__message {(AuthorizationState == EnumAuthorizationState.Denied ? "log-in__message--error" : "")} {(AuthorizationState == EnumAuthorizationState.Granted ? "log-in__message--ok" : "")}";


    bool padlockError => AuthorizationState == EnumAuthorizationState.Denied;
    bool padlockOpened => AuthorizationState == EnumAuthorizationState.Granted;

    void OnClickNumber(int number) => pin += number.ToString();

    void OnClickClear() => pin = string.Empty;

    async Task OnClickOk() => await OnLogIn.InvokeAsync(pin);

}
